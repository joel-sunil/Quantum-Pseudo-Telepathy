from qiskit import *

def entangle(q):
    q.h([0,1])
    q.cx(0,2)
    q.cx(1,3)
    q.barrier()
    return None

def mermin(q,i,j):
    # 0 and 1 are Alice's qubits 2 and 3 are Bob's
    # i correspond's to the row Alice is assigned j corresponds to the column Bob is assigned
    if i==1:
        q.swap(0,1)
    elif i==2:
        q.h([0,1])
    else:
        q.h(0)
        q.cx(0,1)
        q.h(0)
        q.swap(0,1)
        q.x([0,1])
    if j==1:
        q.swap(2,3)
        q.h(3)
    elif j==2:
        q.h(3)
    else:
        q.cx(3,2)
        q.h(3)
    q.measure([0,1,2,3],[3,2,1,0])
    return None
def displaymagic(y,i,j):
    for ii in range(1,4):
        for jj in range(1,4):
            if ii==i:
                if jj==3:
                    if y[0]==y[1]:
                        print(0,end='  ')
                       
                    else:
                        print(1,end='  ')
                        
                else:
                    print(y[jj-1],end='  ')
                    
            elif jj==j:
                if ii==3:
                    if y[2]==y[3]:
                        print(1,end='  ')
                    else:
                        print(0,end='  ')
                else:
                    print(y[ii+1],end='  ')
                    
            else:
                print('X',end='  ')
                
        print('\n')
    print('\n')
    return None
qc=QuantumCircuit(4,4)
for i in range(1,4):
        for j in range(1,4):
            print(i,end=' ')
            print(j)
            print()
            entangle(qc)
            mermin(qc,i,j)
            simulator=Aer.get_backend('qasm_simulator')
            results=execute(qc,backend=simulator,shots=1).result()
            counts=results.get_counts()
            y=list(counts.keys())[0]
            x=str(y)
            displaymagic(x,i,j)
            qc.reset([0,1,2,3])
